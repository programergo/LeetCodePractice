/*package Level1;

import org.w3c.dom.Node;

import javax.swing.tree.TreeNode;
import java.util.*;


public class Day05 {
    public static void main(String[] args) {
        Day05 day05 = new Day05();
        String s = "abccccdd";
        System.out.println(day05.longestPalindrome(s));
    }
    public List<List<Integer>> levelOrder(TreeNode root) {
        List<List<Integer>> lists = new ArrayList<>();
        if (root==null) return lists;
        Queue<TreeNode> queue = new LinkedList<>();
        queue.offer(root);
        while (!queue.isEmpty()){
            List<Integer> list = new ArrayList<>();
            int size = queue.size();
            for (int i = 0; i < size; i++) {
                TreeNode node = queue.poll();
                list.add(node.val);
                if (root.left!=null){
                    queue.offer(root.left);
                }
                if (root.right!=null){
                    queue.offer(root.right);
                }
            }
            lists.add(list);
        }
        return lists;
    }
    public List<Integer> preorder(Node root) {
        ArrayList<Integer> arrayList = new ArrayList<>();
        helper(root,arrayList);
        return arrayList;
    }
    public void helper(Node node , ArrayList<Integer> arrayList){
        if (node==null) return;
        arrayList.add(node.val);
        for(Node node1 : node.children){
            helper(node1,arrayList);
        }
    }
    public int longestPalindrome(String s) {
        int length = 0;
       HashMap<Character,Integer> map = new HashMap<>();
        for (int i = 0; i < s.length(); i++) {
            char ch = s.charAt(i);
            if (map.containsKey(ch)){
                map.put(ch,map.get(ch)+1);
            }else {
                map.put(ch,1);
            }
        }
        Set<Map.Entry<Character, Integer>> entries = map.entrySet();
        for(Map.Entry<Character,Integer> entry : entries){
            if (entry.getValue()%2==0){
                length+=entry.getValue();
            }else {
                length+=entry.getValue()-1;
            }
        }
        if (length<s.length()) length++;
        return length;
    }
    public int maxProfit(int[] prices) {
        if (prices.length==1) return 0;
        int max = 0;
        int min = Integer.MAX_VALUE;
        int profit = 0;
        for (int i = 0; i < prices.length; i++) {
            if (prices[i]<min){
                min = prices[i];
            }else if (prices[i]-min>max){
                max = prices[i]-min;
            }
        }
        return max;
    }
}
*/
